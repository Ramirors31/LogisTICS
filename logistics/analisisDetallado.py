# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'analisisDetallado.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from numpy import product
from helpers import productHelpers
from database import prueba

from helpers import prediccionProductos

class AnalisisDetallado(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1299, 775)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.headerFrame = QtWidgets.QFrame(self.centralwidget)
        self.headerFrame.setGeometry(QtCore.QRect(0, 0, 1311, 91))
        self.headerFrame.setStyleSheet("background-color: rgb(255, 255, 127);")
        self.headerFrame.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.headerFrame.setFrameShadow(QtWidgets.QFrame.Raised)
        self.headerFrame.setObjectName("headerFrame")
        self.label_3 = QtWidgets.QLabel(self.headerFrame)
        self.label_3.setGeometry(QtCore.QRect(480, 10, 461, 71))
        font = QtGui.QFont()
        font.setPointSize(32)
        self.label_3.setFont(font)
        self.label_3.setObjectName("label_3")
        self.regresarBtn = QtWidgets.QPushButton(self.headerFrame)
        self.regresarBtn.setGeometry(QtCore.QRect(20, 10, 61, 61))
        self.regresarBtn.setStyleSheet("border-image: url(:/iconos/iconoRegresar.png);")
        self.regresarBtn.setText("")
        self.regresarBtn.setObjectName("regresarBtn")
        self.frame = QtWidgets.QFrame(self.centralwidget)
        self.frame.setGeometry(QtCore.QRect(0, 90, 1311, 681))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.frame.setFont(font)
        self.frame.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.frame.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame.setObjectName("frame")
        self.verticalLayoutWidget = QtWidgets.QWidget(self.frame)
        self.verticalLayoutWidget.setGeometry(QtCore.QRect(20, 60, 821, 561))
        self.verticalLayoutWidget.setObjectName("verticalLayoutWidget")
        self.grafico = QtWidgets.QVBoxLayout(self.verticalLayoutWidget)
        self.grafico.setContentsMargins(0, 0, 0, 0)
        self.grafico.setObjectName("grafico")
        self.btnBuscar = QtWidgets.QPushButton(self.frame)
        self.btnBuscar.setGeometry(QtCore.QRect(1240, 60, 51, 51))
        font = QtGui.QFont()
        font.setFamily("MS Sans Serif")
        font.setPointSize(12)
        self.btnBuscar.setFont(font)
        self.btnBuscar.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.btnBuscar.setStyleSheet("\n"
"border-image: url(:/iconos/iconoBuscar.png);\n"
"color: rgb(255, 244, 246);\n"
"border-radius:20px")
        self.btnBuscar.setText("")
        self.btnBuscar.setObjectName("btnBuscar")
        self.productosCombo = QtWidgets.QComboBox(self.frame)
        self.productosCombo.setGeometry(QtCore.QRect(860, 60, 361, 41))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.productosCombo.setFont(font)
        self.productosCombo.setObjectName("productosCombo")

        #AÃ‘ADIR LISTA DE PRODUCTOS A COMBO BOX PARA ANALISIS
        helperProductos = productHelpers.ProductHelper("","","",0,0,"",0)
        productos = helperProductos.cargar_combobox()
        for i in range(len(productos)):
            producto = productos[i]
            self.productosCombo.addItem(producto)
        self.label = QtWidgets.QLabel(self.frame)
        self.label.setGeometry(QtCore.QRect(870, 170, 391, 61))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.label.setFont(font)
        self.label.setObjectName("label")
        self.labelUnidadesEstimadas = QtWidgets.QLabel(self.frame)
        self.labelUnidadesEstimadas.setGeometry(QtCore.QRect(870, 230, 391, 61))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.labelUnidadesEstimadas.setFont(font)
        self.labelUnidadesEstimadas.setObjectName("labelUnidadesEstimadas")
        self.labelUnidadesEstimadas.setStyleSheet('color: red')
        self.label_2 = QtWidgets.QLabel(self.frame)
        self.label_2.setGeometry(QtCore.QRect(870, 300, 391, 61))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.label_2.setFont(font)
        self.label_2.setObjectName("label_2")
        self.labelStock = QtWidgets.QLabel(self.frame)
        self.labelStock.setGeometry(QtCore.QRect(870, 360, 391, 61))
        self.labelStock.setStyleSheet('color:red')
        font = QtGui.QFont()
        font.setPointSize(12)
        self.labelStock.setFont(font)
        self.labelStock.setObjectName("labelStock")
        self.label_4 = QtWidgets.QLabel(self.frame)
        self.label_4.setGeometry(QtCore.QRect(870, 400, 411, 111))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.label_4.setFont(font)
        self.label_4.setObjectName("label_4")
        self.labelSugerencia = QtWidgets.QLabel(self.frame)
        self.labelSugerencia.setGeometry(QtCore.QRect(870, 480, 411, 80))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.labelSugerencia.setFont(font)
        self.labelSugerencia.setObjectName("labelSugerencia")
        self.labelSugerencia.setStyleSheet('color:red')
        MainWindow.setCentralWidget(self.centralwidget)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

        #ANALISIS
        self.analisis = prediccionProductos.RegresionProductos()
        
        self.btnBuscar.clicked.connect(lambda: self.buscar_producto(self.productosCombo.currentText()))

    def buscar_producto(self,producto):
        for i in reversed(range(self.grafico.count())): 
                self.grafico.itemAt(i).widget().setParent(None)
        productHelper = productHelpers.ProductHelper("",producto,"",0,0,"",0)

        
        if producto == "Callo de Acha":  
            datos = self.analisis.aplicar_regresion(self.analisis.diaCallo,self.analisis.ventaCallo)
            print(datos)
            print(producto)
            sc = prueba.MplCanvas(self, width=5, height=4, dpi=150)
            sc.axes.plot(datos[1],datos[2] , label="Ventas", marker = "o", color = "red")
            sc.axes.legend(loc = 'upper left')
            sc.axes.set_ylabel("Unidades")
            sc.axes.set_xlabel("Dia del Mes")
            sc.axes.set_title("Producto Estimado Semanalmente")
            datosProducto = productHelper.buscar_producto()
            print(datosProducto)
            estimadoSemanal = round(datos[0],2)
            stockActual = datosProducto[6]
            sugerencia = int(estimadoSemanal - stockActual)
            if(sugerencia < 0):
                sugerencia = 0
            sugerencia = str(sugerencia) + " Unidades"

            self.labelUnidadesEstimadas.setText(str(estimadoSemanal))
            self.labelStock.setText(str(stockActual))
            self.labelSugerencia.setText(sugerencia)
            
            self.grafico.addWidget(sc)
            


        if producto == "Camaron Coctelero":  
            datos = self.analisis.aplicar_regresion(self.analisis.diaCamaronC,self.analisis.ventaCamaronC)
            print(datos)
            print(producto)
            sc = prueba.MplCanvas(self, width=5, height=4, dpi=150)
            sc.axes.plot(datos[1],datos[2] , label="Ventas", marker = "o", color = "red")
            sc.axes.legend(loc = 'upper left')
            sc.axes.set_ylabel("Unidades")
            sc.axes.set_xlabel("Dia del Mes")
            sc.axes.set_title("Producto Estimado Semanalmente")
            datosProducto = productHelper.buscar_producto()
            print(datosProducto)
            estimadoSemanal = round(datos[0],2)
            stockActual = datosProducto[6]
            sugerencia = int(estimadoSemanal - stockActual)
            if(sugerencia < 0):
                sugerencia = 0
            sugerencia = str(sugerencia) + " Unidades"

            self.labelUnidadesEstimadas.setText(str(estimadoSemanal))
            self.labelStock.setText(str(stockActual))
            self.labelSugerencia.setText(sugerencia)
            
            self.grafico.addWidget(sc)


        if producto == "Camaron Gigante":  
            datos = self.analisis.aplicar_regresion(self.analisis.diaCamaronG,self.analisis.ventaCamaronG)
            print(datos)
            print(producto)
            sc = prueba.MplCanvas(self, width=5, height=4, dpi=150)
            sc.axes.plot(datos[1],datos[2] , label="Ventas", marker = "o", color = "red")
            sc.axes.legend(loc = 'upper left')
            sc.axes.set_ylabel("Unidades")
            sc.axes.set_xlabel("Dia del Mes")
            sc.axes.set_title("Producto Estimado Semanalmente")
            datosProducto = productHelper.buscar_producto()
            print(datosProducto)
            estimadoSemanal = round(datos[0],2)
            stockActual = datosProducto[6]
            sugerencia = int(estimadoSemanal - stockActual)
            if(sugerencia < 0):
                sugerencia = 0
            sugerencia = str(sugerencia) + " Unidades"

            self.labelUnidadesEstimadas.setText(str(estimadoSemanal))
            self.labelStock.setText(str(stockActual))
            self.labelSugerencia.setText(sugerencia)
            
            self.grafico.addWidget(sc)

        if producto == "Filete de Pescado":  
            datos = self.analisis.aplicar_regresion(self.analisis.diaFilete,self.analisis.ventaFilete)
            print(datos)
            print(producto)
            sc = prueba.MplCanvas(self, width=5, height=4, dpi=150)
            sc.axes.plot(datos[1],datos[2] , label="Ventas", marker = "o", color = "red")
            sc.axes.legend(loc = 'upper left')
            sc.axes.set_ylabel("Unidades")
            sc.axes.set_xlabel("Dia del Mes")
            sc.axes.set_title("Producto Estimado Semanalmente")
            datosProducto = productHelper.buscar_producto()
            print(datosProducto)
            estimadoSemanal = round(datos[0],2)
            stockActual = datosProducto[6]
            sugerencia = int(estimadoSemanal - stockActual)
            if(sugerencia < 0):
                sugerencia = 0
            sugerencia = str(sugerencia) + " Unidades"

            self.labelUnidadesEstimadas.setText(str(estimadoSemanal))
            self.labelStock.setText(str(stockActual))
            self.labelSugerencia.setText(sugerencia)
            
            self.grafico.addWidget(sc)


        if producto == "Medallon de Atun":  
            datos = self.analisis.aplicar_regresion(self.analisis.diaAtun,self.analisis.ventaAtun)
            print(datos)
            print(producto)
            sc = prueba.MplCanvas(self, width=5, height=4, dpi=150)
            sc.axes.plot(datos[1],datos[2] , label="Ventas", marker = "o", color = "red")
            sc.axes.legend(loc = 'upper left')
            sc.axes.set_ylabel("Unidades")
            sc.axes.set_xlabel("Dia del Mes")
            sc.axes.set_title("Producto Estimado Semanalmente")
            datosProducto = productHelper.buscar_producto()
            print(datosProducto)
            estimadoSemanal = round(datos[0],2)
            stockActual = datosProducto[6]
            sugerencia = int(estimadoSemanal - stockActual)
            if(sugerencia < 0):
                sugerencia = 0
            sugerencia = str(sugerencia) + " Unidades"

            self.labelUnidadesEstimadas.setText(str(estimadoSemanal))
            self.labelStock.setText(str(stockActual))
            self.labelSugerencia.setText(sugerencia)
            
            self.grafico.addWidget(sc)



        if producto == "Ostion":  
            datos = self.analisis.aplicar_regresion(self.analisis.diaOstion,self.analisis.ventaOstion)
            print(datos)
            print(producto)
            sc = prueba.MplCanvas(self, width=5, height=4, dpi=150)
            sc.axes.plot(datos[1],datos[2] , label="Ventas", marker = "o", color = "red")
            sc.axes.legend(loc = 'upper left')
            sc.axes.set_ylabel("Unidades")
            sc.axes.set_xlabel("Dia del Mes")
            sc.axes.set_title("Producto Estimado Semanalmente")
            datosProducto = productHelper.buscar_producto()
            estimadoSemanal = round(datos[0],2)
            stockActual = datosProducto[6]
            sugerencia = int(estimadoSemanal - stockActual)
            if(sugerencia < 0):
                sugerencia = 0
            sugerencia = str(sugerencia) + " Unidades"

            self.labelUnidadesEstimadas.setText(str(estimadoSemanal))
            self.labelStock.setText(str(stockActual))
            self.labelSugerencia.setText(sugerencia)
            
            self.grafico.addWidget(sc)


        if producto == "Pescado Entero":  
            datos = self.analisis.aplicar_regresion(self.analisis.diaPescado,self.analisis.ventaPescado)
            print(datos)
            print(producto)
            sc = prueba.MplCanvas(self, width=5, height=4, dpi=150)
            sc.axes.plot(datos[1],datos[2] , label="Ventas", marker = "o", color = "red")
            sc.axes.legend(loc = 'upper left')
            sc.axes.set_ylabel("Unidades")
            sc.axes.set_xlabel("Dia del Mes")
            sc.axes.set_title("Producto Estimado Semanalmente")
            datosProducto = productHelper.buscar_producto()
            estimadoSemanal = round(datos[0],2)
            stockActual = datosProducto[6]
            sugerencia = int(estimadoSemanal - stockActual)
            if(sugerencia < 0):
                sugerencia = 0
            sugerencia = str(sugerencia) + " Unidades"

            self.labelUnidadesEstimadas.setText(str(estimadoSemanal))
            self.labelStock.setText(str(stockActual))
            self.labelSugerencia.setText(sugerencia)
            
            self.grafico.addWidget(sc)


        if producto == "Pulpo":  
            datos = self.analisis.aplicar_regresion(self.analisis.diaPulpo,self.analisis.ventaPulpo)
            print(datos)
            print(producto)
            sc = prueba.MplCanvas(self, width=5, height=4, dpi=150)
            sc.axes.plot(datos[1],datos[2] , label="Ventas", marker = "o", color = "red")
            sc.axes.legend(loc = 'upper left')
            sc.axes.set_ylabel("Unidades")
            sc.axes.set_xlabel("Dia del Mes")
            sc.axes.set_title("Producto Estimado Semanalmente")
            datosProducto = productHelper.buscar_producto()
            estimadoSemanal = round(datos[0],2)
            stockActual = datosProducto[6]
            sugerencia = int(estimadoSemanal - stockActual)
            if(sugerencia < 0):
                sugerencia = 0

            sugerencia = str(sugerencia) + " Unidades"

            self.labelUnidadesEstimadas.setText(str(estimadoSemanal))
            self.labelStock.setText(str(stockActual))
            self.labelSugerencia.setText(sugerencia)
            
            self.grafico.addWidget(sc)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.label_3.setText(_translate("MainWindow", "AnÃ¡lisis Detallado"))
        self.label.setText(_translate("MainWindow", "Unidades Estimadas para la Semana:"))
        self.label_2.setText(_translate("MainWindow", "Unidades en Stock:"))
        self.label_4.setText(_translate("MainWindow", "Logistics Recomienda solicitar:"))
from iconos import iconosAnalisisDetallado_rc


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = AnalisisDetallado()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
